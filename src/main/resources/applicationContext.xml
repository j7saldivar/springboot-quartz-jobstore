<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
		
		<!-- JobFactory so quartz can do autowired spring components -->
		<property name="jobFactory">
			<bean class="com.saldivar.quartz.config.AutowiringSpringBeanJobFactory" />
		</property>
		
		<!-- Quartz quartz.properties location -->
		<property name="configLocation" value="quartz.properties" />
		
		<!-- Flag to enable or disable the job -->
		<property name="autoStartup" value="true"/>
		
		<!-- The dataSource can be injected through a spring bean -->
		<!-- 
			<property name="dataSource"> 
				<ref bean="dataSourceBean" /> 
			</property> 
		-->
	</bean>





	<bean id="cronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="quartzJob" />
		
		<!-- Cron expression. Execute every 5 minutes -->
		<property name="cronExpression" value="0 0/5 * * * ? *" />
	</bean>





	<bean name="quartzJob"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass"
			value="com.saldivar.quartz.scheduler.UpdatingRecordsJob" />
			
		<!-- Allows the job to be executed again in case of failure -->
		<property name="requestsRecovery" value="true" />
	</bean>

</beans>